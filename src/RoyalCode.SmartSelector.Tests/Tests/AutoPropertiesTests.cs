using FluentAssertions;
using Microsoft.CodeAnalysis;

namespace RoyalCode.SmartSelector.Tests.Tests;

public class AutoPropertiesTests
{
    [Fact]
    public void Should_Generate_All_Public_Properties()
    {
        Util.Compile(Code.AllProperties, out var compilation, out var diagnostics);
        diagnostics.Where(d => d.Severity == DiagnosticSeverity.Error).Should().BeEmpty();

        var generated = string.Join("\n-----\n", compilation.SyntaxTrees.Skip(1).Select(t => t.ToString()));

        generated.Should().Contain("public int Id { get; set; }");
        generated.Should().Contain("public string Name { get; set; }");
        generated.Should().Contain("public bool Active { get; set; }");
        generated.Should().Contain("public DateTime CreatedAt { get; set; }");
        generated.Should().Contain("public DateTime? UpdatedAt { get; set; }");
        generated.Should().Contain("public decimal Price { get; set; }");
        // user structs and collections should also be generated by current implementation
        generated.Should().Contain("public Nested Nested { get; set; }");
        generated.Should().Contain("public List<String> Tags { get; set; }");
        // user complex types should NOT be generated
        generated.Should().NotContain("public NestedNested NestedNested { get; set; }");

        // check the select expression
        generated.Should().Contain("a => new Dto");
        generated.Should().Contain("Id = a.Id,");
        generated.Should().Contain("Name = a.Name,");
        generated.Should().Contain("Active = a.Active,");
        generated.Should().Contain("CreatedAt = a.CreatedAt,");
        generated.Should().Contain("UpdatedAt = a.UpdatedAt,");
        generated.Should().Contain("Price = a.Price,");
        generated.Should().Contain("Nested = a.Nested,");
        generated.Should().Contain("Tags = a.Tags");
    }

    [Fact]
    public void Should_Exclude_Named_Argument_Array()
    {
        Util.Compile(Code.ExcludeViaNamed, out var compilation, out var diagnostics);
        diagnostics.Where(d => d.Severity == DiagnosticSeverity.Error).Should().BeEmpty();

        var generated = string.Join("\n-----\n", compilation.SyntaxTrees.Skip(1).Select(t => t.ToString()));

        generated.Should().Contain("Id { get; set; }");
        generated.Should().Contain("CreatedAt { get; set; }");
        generated.Should().NotContain("Name { get; set; }"); // excluded
        generated.Should().NotContain("Active { get; set; }"); // excluded
    }

    [Fact]
    public void Should_Not_Duplicate_Existing_Properties()
    {
        Util.Compile(Code.ExistingProperties, out var compilation, out var diagnostics);
        diagnostics.Where(d => d.Severity == DiagnosticSeverity.Error).Should().BeEmpty();

        var generatedPieces = compilation.SyntaxTrees.Skip(1).Select(t => t.ToString());
        var combined = string.Join("\n", generatedPieces);

        combined.Should().NotContain("Id { get; set; }"); // excluded, property Id declared manually
    }

    [Fact]
    public void Should_Support_Nameof_In_Constructor_And_Named_Exclude()
    {
        Util.Compile(Code.NameofVariants, out var compilation, out var diagnostics);
        diagnostics.Where(d => d.Severity == DiagnosticSeverity.Error).Should().BeEmpty();

        var generated = string.Join("\n-----\n", compilation.SyntaxTrees.Skip(1).Select(t => t.ToString()));

        generated.Should().Contain("Id { get; set; }");        // not excluded
        generated.Should().NotContain("Name { get; set; }");   // excluded by nameof in ctor
        generated.Should().NotContain("Active { get; set; }"); // excluded by named argument nameof
    }

    [Fact]
    public void Should_Generate_With_Generic_AutoProperties()
    {
        Util.Compile(Code.GenericAttribute, out var compilation, out var diagnostics);
        diagnostics.Where(d => d.Severity == DiagnosticSeverity.Error).Should().BeEmpty();

        var generated = string.Join("\n-----\n", compilation.SyntaxTrees.Skip(1).Select(t => t.ToString()));

        generated.Should().Contain("Id { get; set; }");
        generated.Should().Contain("Name { get; set; }");
    }
}

file static class Code
{
    public const string AllProperties =
"""
using System;
using System.Collections.Generic;
using RoyalCode.SmartSelector;

namespace Tests.SmartSelector.Models;

[AutoSelect<Origin>]
[AutoProperties]
public partial class Dto { }

public class Origin
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public bool Active { get; set; }
    public DateTime CreatedAt { get; set; }
    public DateTime? UpdatedAt { get; set; }
    public decimal Price { get; set; }
    public Nested Nested { get; set; } = new();
    public NestedNested NestedNested { get; set; } = new();
    public List<string> Tags { get; set; } = new();
}

public struct Nested
{ 
    public string Value { get; set; } = string.Empty;
}

public class NestedUserType
{ 
    public string Value { get; set; } = string.Empty;
}

""";

    public const string ExcludeViaNamed =
"""
using System;
using RoyalCode.SmartSelector;

namespace Tests.SmartSelector.Models;

[AutoSelect<Origin>]
[AutoProperties(Exclude = new [] { nameof(Origin.Name), "Active" })]
public partial class Dto { }

public class Origin {
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public bool Active { get; set; }
    public DateTime CreatedAt { get; set; }
}
""";

    public const string ExistingProperties =
"""
using System;
using RoyalCode.SmartSelector;

namespace Tests.SmartSelector.Models;

[AutoSelect<Origin>]
[AutoProperties]
public partial class Dto { public int Id { get; set; } }

public class Origin {
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
}
""";

    public const string NameofVariants =
"""
using System;
using RoyalCode.SmartSelector;

namespace Tests.SmartSelector.Models;

[AutoSelect<Origin>]
[AutoProperties(Exclude = new [] { nameof(Origin.Name), nameof(Origin.Active) })]
public partial class Dto { }

public class Origin {
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public bool Active { get; set; }
}
""";

    public const string GenericAttribute =
"""
using System;
using RoyalCode.SmartSelector;

namespace Tests.SmartSelector.Models;

[AutoProperties<Origin>]
public partial class Dto { }

public class Origin {
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
}
""";
}
